// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502140304_AddFixCharacterGuild")]
    partial class AddFixCharacterGuild
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.AccountDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<DateTime>("SignupDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signup_date");

                    b.HasKey("Id");

                    b.ToTable("account_details");
                });

            modelBuilder.Entity("Domain.Boss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("boss");
                });

            modelBuilder.Entity("Domain.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CharacterType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("character_type");

                    b.Property<long>("Currency")
                        .HasColumnType("bigint")
                        .HasColumnName("currency");

                    b.Property<long?>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<int>("LevelProgression")
                        .HasColumnType("integer")
                        .HasColumnName("level_progression");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("Domain.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Statistics")
                        .HasColumnType("integer")
                        .HasColumnName("statistics");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("equipment");
                });

            modelBuilder.Entity("Domain.Fight", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint")
                        .HasColumnName("character_id");

                    b.Property<long>("BossId")
                        .HasColumnType("bigint")
                        .HasColumnName("boss_id");

                    b.Property<bool>("IsCharacterWin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("time");

                    b.HasKey("CharacterId", "BossId");

                    b.HasIndex("BossId");

                    b.ToTable("fight");
                });

            modelBuilder.Entity("Domain.Guild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("LevelProgression")
                        .HasColumnType("integer")
                        .HasColumnName("level_progression");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("guild");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountDetailsId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_details_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailsId")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("character_equipment", b =>
                {
                    b.Property<long>("equipment_id")
                        .HasColumnType("bigint");

                    b.Property<long>("character_id")
                        .HasColumnType("bigint");

                    b.HasKey("equipment_id", "character_id");

                    b.HasIndex("character_id");

                    b.ToTable("character_equipment", (string)null);
                });

            modelBuilder.Entity("Domain.Character", b =>
                {
                    b.HasOne("Domain.Guild", "Guild")
                        .WithMany("Characters")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Fight", b =>
                {
                    b.HasOne("Domain.Boss", "Boss")
                        .WithMany("Fights")
                        .HasForeignKey("BossId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Character", "Character")
                        .WithMany("Fights")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boss");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.AccountDetails", "AccountDetails")
                        .WithOne("User")
                        .HasForeignKey("Domain.User", "AccountDetailsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountDetails");
                });

            modelBuilder.Entity("character_equipment", b =>
                {
                    b.HasOne("Domain.Character", null)
                        .WithMany()
                        .HasForeignKey("character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHARACTER_EQUIPMENT_character_id");

                    b.HasOne("Domain.Equipment", null)
                        .WithMany()
                        .HasForeignKey("equipment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHARACTER_EQUIPMENT_equipment_id");
                });

            modelBuilder.Entity("Domain.AccountDetails", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Boss", b =>
                {
                    b.Navigation("Fights");
                });

            modelBuilder.Entity("Domain.Character", b =>
                {
                    b.Navigation("Fights");
                });

            modelBuilder.Entity("Domain.Guild", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
